// Copyright (c) Strange Loop Games. All rights reserved.
// See LICENSE file in the project root for full license information.
// <auto-generated from VehicleTemplate.tt />

namespace Eco.ET.TechTree
{
    using System;
    using Eco.Mods.TechTree;
    using System.Collections.Generic;
    using Eco.Core.Items;
    using Eco.Gameplay.Components;
    using Eco.Gameplay.Components.Auth;
    using Eco.Gameplay.Items;
    using Eco.Gameplay.Objects;
    using Eco.Shared.Math;
    using Eco.ET.Components;
    using Eco.Shared.Localization;
    using Eco.Shared.Serialization;
    using Eco.Shared.Items;
    using Eco.Gameplay.Systems.Tooltip;
    using Eco.Gameplay.Systems.NewTooltip;
    using Eco.Core.Controller;
    using Eco.Gameplay.Skills;

    [Serialized]
    [LocDisplayName("Electric Steam Truck")]
    [Weight(25000)]
    [Ecopedia("Crafted Objects", "Vehicles", createAsSubPage: true)]
    public partial class ElectricSteamTruckItem : WorldObjectItem<ElectricSteamTruckObject>, IPersistentData
    {
        public override LocString DisplayDescription { get { return Localizer.DoStr("A truck that runs on steam boiled by electric energy."); } }
        [Serialized, SyncToView, TooltipChildren, NewTooltipChildren(CacheAs.Instance)] public object PersistentData { get; set; }
    }

    [Serialized]
    [RequireComponent(typeof(StandaloneAuthComponent))]
    [RequireComponent(typeof(BatterySupplyComponent))]
    [RequireComponent(typeof(BatteryConsumptionComponent))]
    [RequireComponent(typeof(PublicStorageComponent))]
    [RequireComponent(typeof(TailingsReportComponent))]
    [RequireComponent(typeof(MovableLinkComponent))]
    [RequireComponent(typeof(VehicleComponent))]
    [RequireComponent(typeof(CustomTextComponent))]
    [RequireComponent(typeof(ModularStockpileComponent))]
    [RequireComponent(typeof(MinimapComponent))]           
    [Ecopedia("Crafted Objects", "Vehicles", subPageName: "ElectricSteamTruck Item")]
    public partial class ElectricSteamTruckObject : PhysicsWorldObject, IRepresentsItem
    {
        static ElectricSteamTruckObject()
        {
            WorldObject.AddOccupancy<ElectricSteamTruckObject>(new List<BlockOccupancy>(0));
        }
        public override bool PlacesBlocks            => false;
        public override LocString DisplayName { get { return Localizer.DoStr("Electric Steam Truck"); } }
        public Type RepresentedItemType { get { return typeof(ElectricSteamTruckItem); } }
        [RequiresSkill(typeof(MechanicsSkill), 3)]
        [Ecopedia("Crafted Objects", "Vehicles", subPageName: "Electric Steam Truck Item")]
        public partial class ElectricSteamTruckRecipe : RecipeFamily
        {
            public ElectricSteamTruckRecipe()
            {
                var recipe = new Recipe();
                recipe.Init(
                    name: "Electric Steam Truck",
                    displayName: Localizer.DoStr("Electric Steam Truck"),

                    ingredients: new List<IngredientElement>
                    {
                    new IngredientElement(typeof(SteamTruckItem), 1, staticIngredient: true),
                    new IngredientElement(typeof(ElectricUpgradeKitItem), 1, staticIngredient: true),
                    },

                    items: new List<CraftingElement>
                    {
                    new CraftingElement<ElectricSteamTruckItem>()
                    });
                this.Recipes = new List<Recipe> { recipe };
                this.ExperienceOnCraft = 25;

                this.LaborInCalories = CreateLaborInCaloriesValue(500, typeof(MechanicsSkill));

                this.CraftMinutes = CreateCraftTimeValue(beneficiary: typeof(ElectricSteamTruckRecipe), start: 20, skillType: typeof(MechanicsSkill));

                this.Initialize(displayText: Localizer.DoStr("Electric Steam Truck"), recipeType: typeof(ElectricSteamTruckRecipe));

                CraftingComponent.AddRecipe(tableType: typeof(AssemblyLineObject), recipe: this);
            }
        }

        private ElectricSteamTruckObject() { }
        protected override void Initialize()
        {
            base.Initialize();      
            this.GetComponent<CustomTextComponent>().Initialize(200);
            this.GetComponent<BatterySupplyComponent>().Initialize(1);
            this.GetComponent<BatteryConsumptionComponent>().Initialize(this.GetComponent<BatterySupplyComponent>(), 25);
            this.GetComponent<StockpileComponent>().Initialize(new Vector3i(2,2,3));
            this.GetComponent<PublicStorageComponent>().Initialize(24, 5000000);
            this.GetComponent<MinimapComponent>().InitAsMovable();
            this.GetComponent<MinimapComponent>().SetCategory(Localizer.DoStr("Vehicles"));
            this.GetComponent<VehicleComponent>().Initialize(18, 2,2);
        }
    }
}
